version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: legal-ai-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-legal_ai_db}
      POSTGRES_USER: ${POSTGRES_USER:-legal_ai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_in_production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-legal_ai_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - legal-ai-network

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:0.4.22
    container_name: legal-ai-chromadb
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_AUTH_CREDENTIALS_FILE=/chroma/server.htpasswd
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=chromadb.auth.providers.HtpasswdFileServerAuthCredentialsProvider
      - CHROMA_SERVER_AUTH_PROVIDER=chromadb.auth.basic.BasicAuthServerProvider
    volumes:
      - chromadb_data:/chroma/chroma
      - ./backend/config/chromadb.htpasswd:/chroma/server.htpasswd:ro
    ports:
      - "8001:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal-ai-network

  # Redis for Caching and Session Storage
  redis:
    image: redis:7-alpine
    container_name: legal-ai-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_change_in_production}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - legal-ai-network

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: legal-ai-backend
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://${POSTGRES_USER:-legal_ai_user}:${POSTGRES_PASSWORD:-secure_password_change_in_production}@postgres:5432/${POSTGRES_DB:-legal_ai_db}
      
      # ChromaDB Configuration
      - CHROMADB_HOST=chromadb
      - CHROMADB_PORT=8000
      - CHROMADB_USERNAME=${CHROMADB_USERNAME:-admin}
      - CHROMADB_PASSWORD=${CHROMADB_PASSWORD:-chromadb_password_change_in_production}
      
      # Redis Configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_change_in_production}@redis:6379/0
      
      # Security Configuration
      - SECRET_KEY=${SECRET_KEY:-your_super_secret_key_change_in_production_make_it_32_chars_minimum}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-jwt_secret_key_change_in_production_make_it_very_secure}
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      
      # LLM Configuration
      - LLM_API_BASE_URL=${LLM_API_BASE_URL:-http://coreweave-llm-endpoint:8000/v1}
      - LLM_API_KEY=${LLM_API_KEY:-your_llm_api_key_here}
      - LLM_MODEL_NAME=${LLM_MODEL_NAME:-meta-llama/Llama-2-70b-chat-hf}
      - LLM_MAX_TOKENS=2048
      - LLM_TEMPERATURE=0.7
      - LLM_TIMEOUT=120
      
      # File Storage Configuration
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=52428800
      - ALLOWED_FILE_TYPES=.pdf,.docx,.txt
      
      # OCR Configuration
      - ENABLE_OCR=true
      - OCR_LANGUAGE=eng
      - TESSERACT_CMD=/usr/bin/tesseract
      
      # Environment
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      
      # CORS Configuration
      - CORS_ORIGINS=http://localhost:3000,https://your-frontend-domain.com
      
      # Email Configuration (if using SMTP)
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-your-email@gmail.com}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-your-app-password}
      - SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL:-noreply@your-domain.com}
    volumes:
      - backend_uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      chromadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - legal-ai-network

  # Frontend Next.js Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL:-http://localhost:8000}
        - NEXT_PUBLIC_WS_BASE_URL=${NEXT_PUBLIC_WS_BASE_URL:-ws://localhost:8000}
    container_name: legal-ai-frontend
    environment:
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - legal-ai-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: legal-ai-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - legal-ai-network

volumes:
  postgres_data:
    driver: local
  chromadb_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  nginx_cache:
    driver: local

networks:
  legal-ai-network:
    driver: bridge